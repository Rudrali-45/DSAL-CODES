PS:Consider telephone book database of N clients. Make use of a hash table implementation to 
quickly look up clientâ€˜s telephone number 

#include <iostream> // Include the iostream library for input and output operations.
#include <string.h> // Include the string.h library.  While this code doesn't directly use string.h functions, it's often included in C++ for compatibility or habit.  It's not needed for this specific code.

using namespace std; // Use the standard namespace to avoid writing std:: before cout, cin, etc.

struct node { // Define a structure named 'node' to represent an element in the linked list.
    int value; // Store the integer value (in this case, a phone number).
    node* next; // Pointer to the next node in the linked list.
};

node* HashTable[10]; // Declare a global array named 'HashTable' of size 10.  Each element of this array is a pointer to a 'node'.  This array represents the hash table.

class hashing { // Define a class named 'hashing' to encapsulate the hash table operations.
public:
    hashing() { // Constructor for the 'hashing' class.
        for (int i = 0; i < 10; i++) { // Loop through each element of the 'HashTable' array.
            HashTable[i] = NULL; // Initialize each element of the 'HashTable' to NULL.  This means that initially, each slot in the hash table is empty.
        }
    }

    int HashFunction(int value) { // Define a method named 'HashFunction' that takes an integer 'value' and returns an integer.
        return (value % 10); // Calculate the hash value by taking the modulo of the 'value' by 10.  This will result in a value between 0 and 9, which corresponds to an index in the 'HashTable'.
    }

    node* create_node(int x) { // Define a method named 'create_node' that takes an integer 'x' and returns a pointer to a 'node'.
        node* temp = new node; // Create a new node dynamically using the 'new' operator and store its address in 'temp'.
        temp->next = NULL; // Set the 'next' pointer of the new node to NULL, indicating that it is the last node in a list (or the only node).
        temp->value = x; // Store the input value 'x' in the 'value' field of the new node.
        return temp; // Return the pointer to the newly created node.
    }

    void display() { // Define a method named 'display' that prints the contents of the hash table.
        for (int i = 0; i < 10; i++) { // Loop through each slot in the 'HashTable'.
            node* temp = HashTable[i]; // Get the pointer to the first node in the linked list at index 'i'.
            cout << "a[" << i << "] : "; // Print the index of the hash table slot.
            while (temp != NULL) { // Loop through the linked list at the current slot.
                cout << " ->" << temp->value; // Print the value of the current node.
                temp = temp->next; // Move to the next node in the list.
            }
            cout << "\n"; // Print a newline character after printing all elements in the list.
        }
    }

    int searchElement(int value) { // Define a method named 'searchElement' that takes an integer 'value' and returns an integer.
        bool flag = false; // Initialize a boolean variable 'flag' to false.  This flag will indicate whether the element is found.
        int hash_val = HashFunction(value); // Calculate the hash value for the given 'value'.
        node* entry = HashTable[hash_val]; // Get the pointer to the first node in the linked list at the calculated hash index.

        cout << "\nElement found at : "; // Print a message indicating where the search is being performed.
        while (entry != NULL) { // Loop through the linked list at the hash index.
            if (entry->value == value) { // Check if the value of the current node matches the 'value' being searched for.
                cout << hash_val << " : " << entry->value << endl; // If a match is found, print the hash index and the value.
                flag = true; // Set the flag to true.
            }
            entry = entry->next; // Move to the next node in the list.
        }

        return flag ? hash_val : -1; // Return the hash value if the element is found (flag is true), otherwise return -1.
    }

    void deleteElement(int value) { // Define a method named 'deleteElement' that takes an integer 'value' and deletes the node containing that value from the hash table.
        int hash_val = HashFunction(value); // Calculate the hash value for the given 'value'.
        node* entry = HashTable[hash_val]; // Get the pointer to the first node in the linked list at the calculated hash index.

        if (entry == NULL) { // Check if the list at the hash index is empty.
            cout << "No Element found\n"; // If the list is empty, print a message and return.
            return;
        }

        if (entry->value == value) { // Check if the node to be deleted is the first node in the list.
            HashTable[hash_val] = entry->next; // If it is, update the hash table slot to point to the next node (or NULL if it was the only node).
            delete entry; // Delete the node.
            return;
        }

        node* prev = NULL; // Initialize a pointer 'prev' to NULL.  This pointer will point to the previous node in the list.
        while (entry != NULL && entry->value != value) { // Loop through the list until the end is reached or the node to be deleted is found.
            prev = entry; // Update 'prev' to point to the current node.
            entry = entry->next; // Move to the next node.
        }

        if (entry == NULL) { // Check if the node to be deleted was not found in the list.
            cout << "No Element found\n"; // If not found, print a message and return.
            return;
        }

        prev->next = entry->next; // Update the 'next' pointer of the previous node to point to the node after the one to be deleted.  This removes the node from the list.
        delete entry; // Delete the node.
    }

    void insertElement(int value) { // Define a method named 'insertElement' that takes an integer 'value' and inserts a new node with that value into the hash table.
        int hash_val = HashFunction(value); // Calculate the hash value for the given 'value'.
        node* head = create_node(value); // Create a new node using the 'create_node' method.

        if (HashTable[hash_val] == NULL) { // Check if the slot at the hash index is empty.
            HashTable[hash_val] = head; // If it is, insert the new node as the first node in the list.
        } else { // If the slot is not empty (collision occurred).
            node* temp = HashTable[hash_val]; // Get the pointer to the first node in the list at the hash index.
            while (temp->next != NULL) { // Traverse the list to find the last node.
                temp = temp->next;
            }
            temp->next = head; // Append the new node to the end of the list.
        }
    }
};

int main() { // The main function, the entry point of the program.
    int ch, data, search, del; // Declare integer variables for user choice, data to insert, data to search, and data to delete.
    hashing h; // Create an object 'h' of the 'hashing' class.

    do { // Start a do-while loop to provide a menu-driven interface.
        cout << "\nTelephone : \n1.Insert \n2.Display \n3.Search \n4.Delete \n5.Exit"; // Display the menu options.
        cin >> ch; // Read the user's choice.

        switch (ch) { // Start a switch statement to handle the user's choice.
            case 1: // If the user chooses 1 (Insert).
                cout << "\nEnter phone no. to be inserted : ";
                cin >> data; // Read the phone number to be inserted.
                h.insertElement(data); // Call the 'insertElement' method to insert the phone number.
                break;
            case 2: // If the user chooses 2 (Display).
                h.display(); // Call the 'display' method to display the hash table.
                break;
            case 3: // If the user chooses 3 (Search).
                cout << "\nEnter the no to be searched : ";
                cin >> search; // Read the phone number to be searched.
                if (h.searchElement(search) == -1) { // Call the 'searchElement' method and check if it returns -1 (not found).
                    cout << "No element found at key\n";
                }
                break;
            case 4: // If the user chooses 4 (Delete).
                cout << "\nEnter the phno. to be deleted : ";
                cin >> del; // Read the phone number to be deleted.
                h.deleteElement(del); // Call the 'deleteElement' method to delete the phone number.
                cout << "Phno. Deleted\n";
                break;
        }
    } while (ch != 5); // Continue the loop until the user enters 5 (Exit).

    return 0; // Return 0 to indicate successful program execution.
}


  
