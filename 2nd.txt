PS:Implement all function of dictionary (ADT) using hashing and handle collision using chaining with/without replacement.  
Data : Set of (key,value) pairs, key are map to value, keys must be comparable, key must be unique. 
Standard operation : Insert (key,value), Find (key), Delete (key).

#include <iostream>
#include <cstring> // Use <cstring> instead of <string.h>  --> Corrected Header

using namespace std;

class HashFunction {
    struct hash {
        long key;
        char name[10];
    };

    hash h[10];

public:
    HashFunction();
    void insert();
    void display();
    int find(long);
    void Delete(long);
};

HashFunction::HashFunction() {
    for (int i = 0; i < 10; i++) {
        h[i].key = -1;          // Initialize key to -1 (indicating empty slot)
        strcpy(h[i].name, "NULL"); // Initialize name to "NULL"
    }
}

void HashFunction::Delete(long k) {
    int index = find(k);       // Find the index of the key to delete
    if (index == -1) {
        cout << "\n\tKey Not Found";
    } else {
        h[index].key = -1;      // Set the key to -1 to mark the slot as empty
        strcpy(h[index].name, "NULL"); // Set the name to "NULL"
        cout << "\n\tKey is Deleted";
    }
}

int HashFunction::find(long k) {
    for (int i = 0; i < 10; i++) {
        if (h[i].key == k) {
            cout << "\n\t" << h[i].key << " is Found at " << i << " Location With Name " << h[i].name;
            return i;
        }
    }
    return -1; // Return -1 if the key is not found
}

void HashFunction::display() {
    cout << "\n\t\tKey\t\tName";
    for (int i = 0; i < 10; i++) {
        cout << "\n\th[" << i << "]\t" << h[i].key << "\t\t" << h[i].name;
    }
}

void HashFunction::insert() {
    char ans, n[10], ntemp[10];
    long k, temp;
    int hi, cnt = 0, flag = 0;

    do {
        if (cnt >= 10) {
            cout << "\n\tHash Table is FULL";
            break;
        }

        cout << "\n\tEnter a Telephone No: ";
        cin >> k;
        cout << "\n\tEnter a Client Name: ";
        cin >> n;
        hi = k % 10;  // Calculate the hash index (simple modulo 10)

        if (h[hi].key == -1) { // If the slot is empty
            h[hi].key = k;
            strcpy(h[hi].name, n);
        } else { // Collision occurred
            if (h[hi].key % 10 != hi) { // Check if existing key is not at its correct position
                temp = h[hi].key;
                strcpy(ntemp, h[hi].name);
                h[hi].key = k;
                strcpy(h[hi].name, n);  //replace the existing key with the new key

                for (int i = hi + 1; i < 10; i++) { //find the next empty slot
                    if (h[i].key == -1) {
                        h[i].key = temp;
                        strcpy(h[i].name, ntemp);
                        flag = 1;
                        break;
                    }
                }

                for (int i = 0; i < hi && flag == 0; i++) { //if not found, search from the beginning
                    if (h[i].key == -1) {
                        h[i].key = temp;
                        strcpy(h[i].name, ntemp);
                        break;
                    }
                }
            } else { // If the existing key is at its correct position, find next empty slot.
                for (int i = hi + 1; i < 10; i++) {
                    if (h[i].key == -1) {
                        h[i].key = k;
                        strcpy(h[i].name, n);
                        flag = 1;
                        break;
                    }
                }

                for (int i = 0; i < hi && flag == 0; i++) {
                    if (h[i].key == -1) {
                        h[i].key = k;
                        strcpy(h[i].name, n);
                        break;
                    }
                }
            }
        }

        flag = 0;
        cnt++;
        cout << "\n\t..... Do You Want to Insert More Key (y/n)? ";
        cin >> ans;
    } while (ans == 'y' || ans == 'Y');
}

int main() {
    long k;
    int ch, index;
    char ans;
    HashFunction obj;

    do {
        cout << "\n\t*** Telephone (ADT) *****";
        cout << "\n\t1. Insert\n\t2. Display\n\t3. Find\n\t4. Delete\n\t5. Exit";
        cout << "\n\t..... Enter Your Choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                obj.insert();
                break;
            case 2:
                obj.display();
                break;
            case 3:
                cout << "\n\tEnter a Key Which You Want to Search: ";
                cin >> k;
                index = obj.find(k);
                if (index == -1) {
                    cout << "\n\tKey Not Found";
              

