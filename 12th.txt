#include <iostream>
#include <fstream>
#include <cstring>
#include <cstdlib>
using namespace std;

class EMP_CLASS {
    typedef struct EMPLOYEE {
        char name[30];
        int emp_id;
        int salary;
    } Rec;

    typedef struct INDEX {
        int emp_id;
        int position;
    } Ind_Rec;

    Rec Records;
    Ind_Rec Ind_Records;

public:
    EMP_CLASS();
    void Create();
    void Display();
    void Update();
    void Delete();
    void Append();
    void Search();
};

EMP_CLASS::EMP_CLASS() {
    strcpy(Records.name, "");
    Records.emp_id = -1;
    Records.salary = -1;
}

void EMP_CLASS::Create() {
    int i = 0;
    char ch = 'y';
    fstream seqfile("EMP.DAT", ios::out | ios::binary);
    fstream indexfile("IND.DAT", ios::out | ios::binary);

    do {
        cout << "\nEnter Name: ";
        cin >> Records.name;
        cout << "Enter Emp_ID: ";
        cin >> Records.emp_id;
        cout << "Enter Salary: ";
        cin >> Records.salary;

        seqfile.write((char *)&Records, sizeof(Records));
        Ind_Records.emp_id = Records.emp_id;
        Ind_Records.position = i;
        indexfile.write((char *)&Ind_Records, sizeof(Ind_Records));

        i++;
        cout << "Do you want to add more records? (y/n): ";
        cin >> ch;
    } while (ch == 'y' || ch == 'Y');

    seqfile.close();
    indexfile.close();
}

void EMP_CLASS::Display() {
    fstream seqfile("EMP.DAT", ios::in | ios::binary);
    fstream indexfile("IND.DAT", ios::in | ios::binary);

    cout << "\nThe Contents of the file are:\n";
    while (indexfile.read((char *)&Ind_Records, sizeof(Ind_Records))) {
        int offset = Ind_Records.position * sizeof(Rec);
        seqfile.seekg(offset, ios::beg);
        seqfile.read((char *)&Records, sizeof(Records));
        if (Records.emp_id != -1) {
            cout << "\nName: " << Records.name;
            cout << "\nEmp_ID: " << Records.emp_id;
            cout << "\nSalary: " << Records.salary << "\n";
        }
    }

    seqfile.close();
    indexfile.close();
}

void EMP_CLASS::Update() {
    int pos = -1, id;
    char new_name[30];
    int new_salary;

    cout << "\nEnter the Emp_ID to update: ";
    cin >> id;

    fstream seqfile("EMP.DAT", ios::in | ios::out | ios::binary);
    fstream indexfile("IND.DAT", ios::in | ios::binary);

    while (indexfile.read((char *)&Ind_Records, sizeof(Ind_Records))) {
        if (id == Ind_Records.emp_id) {
            pos = Ind_Records.position;
            break;
        }
    }

    if (pos == -1) {
        cout << "\nRecord not found!";
        return;
    }

    cout << "\nEnter new Name: ";
    cin >> new_name;
    cout << "Enter new Salary: ";
    cin >> new_salary;

    int offset = pos * sizeof(Rec);
    seqfile.seekp(offset);
    strcpy(Records.name, new_name);
    Records.emp_id = id;
    Records.salary = new_salary;

    seqfile.write((char *)&Records, sizeof(Records));
    cout << "\nRecord updated!";
    seqfile.close();
    indexfile.close();
}

void EMP_CLASS::Delete() {
    int id, pos = -1;
    cout << "\nEnter Emp_ID to delete: ";
    cin >> id;

    fstream seqfile("EMP.DAT", ios::in | ios::out | ios::binary);
    fstream indexfile("IND.DAT", ios::in | ios::out | ios::binary);

    while (indexfile.read((char *)&Ind_Records, sizeof(Ind_Records))) {
        if (id == Ind_Records.emp_id) {
            pos = Ind_Records.position;
            break;
        }
    }

    if (pos == -1) {
        cout << "\nRecord not found!";
        return;
    }

    int offset = pos * sizeof(Rec);
    seqfile.seekp(offset);
    strcpy(Records.name, "");
    Records.emp_id = -1;
    Records.salary = -1;
    seqfile.write((char *)&Records, sizeof(Records));

    offset = pos * sizeof(Ind_Rec);
    indexfile.seekp(offset);
    Ind_Records.emp_id = -1;
    Ind_Records.position = pos;
    indexfile.write((char *)&Ind_Records, sizeof(Ind_Records));

    cout << "\nRecord deleted!";
    seqfile.close();
    indexfile.close();
}

void EMP_CLASS::Append() {
    fstream indexfile("IND.DAT", ios::in | ios::binary);
    indexfile.seekg(0, ios::end);
    int pos = indexfile.tellg() / sizeof(Ind_Records);
    indexfile.close();

    fstream seqfile("EMP.DAT", ios::app | ios::binary);
    indexfile.open("IND.DAT", ios::app | ios::binary);

    cout << "\nEnter record to append:";
    cout << "\nName: "; cin >> Records.name;
    cout << "Emp_ID: "; cin >> Records.emp_id;
    cout << "Salary: "; cin >> Records.salary;

    seqfile.write((char *)&Records, sizeof(Records));
    Ind_Records.emp_id = Records.emp_id;
    Ind_Records.position = pos;
    indexfile.write((char *)&Ind_Records, sizeof(Ind_Records));

    cout << "\nRecord appended!";
    seqfile.close();
    indexfile.close();
}

void EMP_CLASS::Search() {
    int id, pos = -1;
    cout << "\nEnter Emp_ID to search: ";
    cin >> id;

    fstream indexfile("IND.DAT", ios::in | ios::binary);
    while (indexfile.read((char *)&Ind_Records, sizeof(Ind_Records))) {
        if (id == Ind_Records.emp_id) {
            pos = Ind_Records.position;
            break;
        }
    }

    if (pos == -1) {
        cout << "\nRecord not found!";
        return;
    }

    int offset = pos * sizeof(Rec);
    fstream seqfile("EMP.DAT", ios::in | ios::binary);
    seqfile.seekg(offset, ios::beg);
    seqfile.read((char *)&Records, sizeof(Records));

    if (Records.emp_id == -1) {
        cout << "\nRecord was deleted.";
    } else {
        cout << "\nRecord found:";
        cout << "\nName: " << Records.name;
        cout << "\nEmp_ID: " << Records.emp_id;
        cout << "\nSalary: " << Records.salary;
    }

    seqfile.close();
    indexfile.close();
}

int main() {
    EMP_CLASS List;
    char ans = 'y';
    int choice;

    do {
        cout << "\n\nMain Menu";
        cout << "\n1. Create";
        cout << "\n2. Display";
        cout << "\n3. Update";
        cout << "\n4. Delete";
        cout << "\n5. Append";
        cout << "\n6. Search";
        cout << "\n7. Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: List.Create(); break;
            case 2: List.Display(); break;
            case 3: List.Update(); break;
            case 4: List.Delete(); break;
            case 5: List.Append(); break;
            case 6: List.Search(); break;
            case 7: exit(0);
            default: cout << "Invalid choice!";
        }

        cout << "\nDo you want to go back to Main Menu? (y/n): ";
        cin >> ans;
    } while (ans == 'y' || ans == 'Y');

    return 0;
}
